context Assessment {

	constraint AtLeastOneMS {
	
		check: self.microservices.size() >= 1
		
		message: "Your project must have at least one microservice."
	
	
	}

}

context Event {

	constraint UsedAtLeastOnce {
	
		check : self.relatedProducers.size() + self.relatedConsumers.size() + self.relatedStreams.size() >= 1
		
		message: "Your event titled " + self.eventName + " must be used in at least one event stream."
	
	}

	constraint HasProducerAndConsumer {
	
		check : self.relatedProducers.size() >= 1 and self.relatedConsumers.size() >= 1 
		
		message: "Your event titled " + self.eventName + " must have one producer and one consumer"
	
	}
}


context Domain {

	constraint NamePresent {
		
		check: self.name.length() >= 1
		
		message: "The domain must have a name."
	}

	constraint DoesNotStartWithNumber {
	
		guard: self.satisfies("NamePresent")
		
		check {
			var c = self.name.charAt(0);
			return not(c.isInteger());
		}
		
		message: "The name of a domain cannot start with a number - your domain starts with '" + self.name.charAt(0) + "'"
	}

}

context HttpMethod {

	constraint PathPresent {
	
		check: self.path.length() >= 1
		
		message: "There must be a given http path for a http method."
	
	}
	
	constraint NoSpaces {
	
		guard: self.satisfies("PathPresent")
	
		check: not self.path.contains(" ")
		
		message: "there cannot be spaces in a http method."
	
	}
	
	constraint startsWithSlash {
		guard: self.satisfies("PathPresent")
		
		check: self.path.startsWith("/")
		
		message: "a path must begin with a '/' character"
	}
	
	constraint TagsUpperCase {
	
		check {
			
			var finalcheck : Boolean = true;
			
			for (x : String in self.tags) {
				finalcheck = (x.ftuc() == x);
			}
			return finalcheck;		
		} 
		
		message: "a tag must begin with a capital letter"
		
		fix {
			title: "changing to upper case."
			
			do {
				var oset : OrderedSet;
				for (x : String in self.tags) {
					oset.add(x.ftuc());
				}
				self.tags = oset;
			}
		}
	}
	
	constraint ReturnTypePresent {
		
		check: self.returnType.length() >= 1
		
		message: "Return type should be present. If there is no return type, return 'void' instead"
	
	}
	
	constraint HttpTypePresence {
		check: self.httpType.length() >= 1
		
		message: "http method type should be present"	
	}
	
	constraint HttpTypeValidity {
	
		guard: self.satisfies("HttpTypePresence")
	
		check {
			var httpMethodsSet : OrderedSet;
			httpMethodsSet.add("get");
			httpMethodsSet.add("head");
			httpMethodsSet.add("options");
			httpMethodsSet.add("trace");
			httpMethodsSet.add("delete");
			httpMethodsSet.add("put");
			httpMethodsSet.add("post");
			httpMethodsSet.add("patch");
			httpMethodsSet.add("connect");
			var lt : String = self.httpType.toLowerCase();
			return httpMethodsSet.contains(self.httpType.toLowerCase());
		}
		
		message: "Enter a valid http method"
	}
	
	constraint HttpMethodStartWithUpper {
	
		guard: self.satisfies("HttpTypeValidity")
		
		check: self.httpType == self.httpType.ftuc()
		
		message: "Start your http method with an upper case"
		
		fix {
			title: "set first letter to an upper case."
			
			do {
				self.httpType = self.httpType.ftuc();
			}
		}
	}
	
	
}